// Generated by gencpp from file balboa_core/lineSensor.msg
// DO NOT EDIT!


#ifndef BALBOA_CORE_MESSAGE_LINESENSOR_H
#define BALBOA_CORE_MESSAGE_LINESENSOR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace balboa_core
{
template <class ContainerAllocator>
struct lineSensor_
{
  typedef lineSensor_<ContainerAllocator> Type;

  lineSensor_()
    : row_i(0)
    , num_coln(0)
    , num_row(0)
    , sensor0(0)
    , sensor1(0)
    , sensor2(0)
    , sensor3(0)
    , sensor4(0)  {
    }
  lineSensor_(const ContainerAllocator& _alloc)
    : row_i(0)
    , num_coln(0)
    , num_row(0)
    , sensor0(0)
    , sensor1(0)
    , sensor2(0)
    , sensor3(0)
    , sensor4(0)  {
  (void)_alloc;
    }



   typedef uint8_t _row_i_type;
  _row_i_type row_i;

   typedef uint8_t _num_coln_type;
  _num_coln_type num_coln;

   typedef uint8_t _num_row_type;
  _num_row_type num_row;

   typedef uint16_t _sensor0_type;
  _sensor0_type sensor0;

   typedef uint16_t _sensor1_type;
  _sensor1_type sensor1;

   typedef uint16_t _sensor2_type;
  _sensor2_type sensor2;

   typedef uint16_t _sensor3_type;
  _sensor3_type sensor3;

   typedef uint16_t _sensor4_type;
  _sensor4_type sensor4;





  typedef boost::shared_ptr< ::balboa_core::lineSensor_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::balboa_core::lineSensor_<ContainerAllocator> const> ConstPtr;

}; // struct lineSensor_

typedef ::balboa_core::lineSensor_<std::allocator<void> > lineSensor;

typedef boost::shared_ptr< ::balboa_core::lineSensor > lineSensorPtr;
typedef boost::shared_ptr< ::balboa_core::lineSensor const> lineSensorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::balboa_core::lineSensor_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::balboa_core::lineSensor_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::balboa_core::lineSensor_<ContainerAllocator1> & lhs, const ::balboa_core::lineSensor_<ContainerAllocator2> & rhs)
{
  return lhs.row_i == rhs.row_i &&
    lhs.num_coln == rhs.num_coln &&
    lhs.num_row == rhs.num_row &&
    lhs.sensor0 == rhs.sensor0 &&
    lhs.sensor1 == rhs.sensor1 &&
    lhs.sensor2 == rhs.sensor2 &&
    lhs.sensor3 == rhs.sensor3 &&
    lhs.sensor4 == rhs.sensor4;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::balboa_core::lineSensor_<ContainerAllocator1> & lhs, const ::balboa_core::lineSensor_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace balboa_core

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::balboa_core::lineSensor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::balboa_core::lineSensor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::balboa_core::lineSensor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::balboa_core::lineSensor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::balboa_core::lineSensor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::balboa_core::lineSensor_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::balboa_core::lineSensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d21aa9e782a1fd0adaef4e4628723bc4";
  }

  static const char* value(const ::balboa_core::lineSensor_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd21aa9e782a1fd0aULL;
  static const uint64_t static_value2 = 0xdaef4e4628723bc4ULL;
};

template<class ContainerAllocator>
struct DataType< ::balboa_core::lineSensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "balboa_core/lineSensor";
  }

  static const char* value(const ::balboa_core::lineSensor_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::balboa_core::lineSensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 row_i\n"
"uint8 num_coln\n"
"uint8 num_row\n"
"uint16 sensor0\n"
"uint16 sensor1\n"
"uint16 sensor2\n"
"uint16 sensor3\n"
"uint16 sensor4\n"
;
  }

  static const char* value(const ::balboa_core::lineSensor_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::balboa_core::lineSensor_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.row_i);
      stream.next(m.num_coln);
      stream.next(m.num_row);
      stream.next(m.sensor0);
      stream.next(m.sensor1);
      stream.next(m.sensor2);
      stream.next(m.sensor3);
      stream.next(m.sensor4);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct lineSensor_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::balboa_core::lineSensor_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::balboa_core::lineSensor_<ContainerAllocator>& v)
  {
    s << indent << "row_i: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.row_i);
    s << indent << "num_coln: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.num_coln);
    s << indent << "num_row: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.num_row);
    s << indent << "sensor0: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.sensor0);
    s << indent << "sensor1: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.sensor1);
    s << indent << "sensor2: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.sensor2);
    s << indent << "sensor3: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.sensor3);
    s << indent << "sensor4: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.sensor4);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BALBOA_CORE_MESSAGE_LINESENSOR_H
